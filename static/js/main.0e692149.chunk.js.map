{"version":3,"sources":["assets/loader.gif","serviceWorker.js","components/ListItem/index.js","components/Image/index.js","App.js","helpers/UseIO/index.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","ListItem","props","country","cases","deaths","recovered","todayCases","todayDeaths","active","critical","Card","bg","text","className","style","margin","Body","Title","Text","Image","src","srcSet","data-src","alt","App","useState","latest","setLatest","results","setResults","lastUpdated","Date","parseInt","updated","toString","searchCountries","setSearchCountries","err","setErr","useEffect","getData","elements","setElements","entries","setEntries","observer","useRef","length","current","IntersectionObserver","ioEntries","forEach","element","observe","disconnect","useIO","a","axios","all","get","res","i","data","toLowerCase","Error","img","Array","from","document","getElementsByClassName","entry","isIntersecting","lazyImage","target","dataset","classList","remove","unobserve","countries","filter","item","includes","map","key","countryInfo","flag","logo","CardDeck","id","Img","variant","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","value","queries","columns","query","ReactDOM","render","StrictMode","getElementById","hot","accept"],"mappings":"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","file":"static/js/main.0e692149.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.eb2d91c5.gif\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nconst ListItem = (props) => {\r\n\tconst { country, cases, deaths, recovered, todayCases, todayDeaths, active, critical } = props;\r\n\treturn (\r\n\t\t<Card bg=\"light\" text=\"dark\" className=\"text-center\" style={{ margin: '10px' }}>\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t\t<Card.Title className=\"country-title\">{country}</Card.Title>\r\n\t\t\t\t\t<Card.Text>Cases {cases}</Card.Text>\r\n\t\t\t\t\t<Card.Text>Deaths {deaths}</Card.Text>\r\n\t\t\t\t\t<Card.Text>Recovered {recovered}</Card.Text>\r\n\t\t\t\t\t<Card.Text>Today's cases{todayCases}</Card.Text>\r\n\t\t\t\t\t<Card.Text>Today's deaths {todayDeaths}</Card.Text>\r\n\t\t\t\t\t<Card.Text>Active {active}</Card.Text>\r\n\t\t\t\t\t<Card.Text>Critical {critical}</Card.Text>\r\n\t\t\t\t</Card.Body>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default ListItem;","\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Image = ({ src,\r\n    srcSet,\r\n    country\r\n}) => (\r\n        <img\r\n            src={src}\r\n            className=\"lazy flag\"\r\n            srcSet={srcSet}\r\n            data-src={src}\r\n            alt={`${country} flag of country`}\r\n        />\r\n    );\r\n\r\nImage.propTypes = {\r\n    src: PropTypes.string.isRequired,\r\n    country: PropTypes.string.isRequired,\r\n}","import React, { useEffect, useState } from 'react';\r\nimport CardDeck from 'react-bootstrap/CardDeck';\r\nimport Card from 'react-bootstrap/Card';\r\nimport axios from 'axios';\r\nimport Columns from 'react-columns';\r\nimport logo from './assets/loader.gif';\r\nimport Form from 'react-bootstrap/Form';\r\nimport \"./index.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ListItem from './components/ListItem'\r\nimport { useIO } from './helpers/UseIO';\r\nimport { Image } from './components/Image';\r\n\r\nfunction App() {\r\n\r\n  const [latest, setLatest] = useState([]);\r\n  const [results, setResults] = useState([]);\r\n  const date = new Date(parseInt(latest.updated));\r\n  const lastUpdated = date.toString();\r\n  const [searchCountries, setSearchCountries] = useState(\"\");\r\n  const [err, setErr] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n\r\n    //an initial load of some data\r\n    getData();\r\n\r\n  }, []);\r\n\r\n  const [observer, setElements, entries] = useIO();\r\n\r\n  useEffect(() => {\r\n    if (results.length) {\r\n      let img = Array.from(document.getElementsByClassName('lazy'));\r\n      setElements(img)\r\n    }\r\n  }, [results, setElements]);\r\n\r\n  useEffect(() => {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n        let lazyImage = entry.target;\r\n        lazyImage.src = lazyImage.dataset.src;\r\n        lazyImage.classList.remove(\"lazy\");\r\n        observer.unobserve(lazyImage);\r\n      }\r\n    })\r\n  }, [entries, observer]);\r\n\r\n  async function getData() {\r\n    try {\r\n      const res = await axios\r\n        .all([\r\n          axios.get('https://corona.lmao.ninja/v2/all'),\r\n          axios.get('https://corona.lmao.ninja/v2/countries')\r\n        ]);\r\n\r\n      // // Lowercasing all countries\r\n      for (var i = 0; i < res[1].data.length; i++) {\r\n        res[1].data[i].country = res[1].data[i].country.toLowerCase();\r\n      }\r\n\r\n      setLatest(res[0].data);\r\n      setResults(res[1].data);\r\n    } catch (err) {\r\n      setErr(err);\r\n      throw new Error(\"Image did not load\");\r\n    };\r\n  };\r\n\r\n  const filterCountries = results.filter(item => {\r\n     return item.country.includes(searchCountries)\r\n  });\r\n\r\n  const countries = filterCountries.map((data, i) => {\r\n    return (\r\n      <div key={i}>\r\n        <Image\r\n          src={data.countryInfo.flag}\r\n          alt='thumbnails'\r\n          country={data.country}\r\n        />\r\n        <ListItem key={i}\r\n          img={data.countryInfo.flag}\r\n          country={data.country}\r\n          cases={data.cases}\r\n          deaths={data.deaths}\r\n          recovered={data.recovered}\r\n          todayCases={data.todayCases}\r\n          todayDeaths={data.todayDeaths}\r\n          active={data.active}\r\n          logo={logo}\r\n          critical={data.critical}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  var queries = [{\r\n    columns: 2,\r\n    query: 'min-width:500px'\r\n  }, {\r\n    columns: 3,\r\n    query: 'min-width:1000px'\r\n  }];\r\n  return (\r\n    <div className=\"App\">\r\n      <CardDeck id=\"card-body\">\r\n        <Card bg=\"secondary\" text=\"white\" className=\"text-center\" style={{ margin: '10px' }}>\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            <Card.Title>Cases</Card.Title>\r\n            <Card.Text>{latest.cases}</Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small text=\"white\">Last updated {lastUpdated}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n        <Card bg=\"danger\" text=\"white\" className=\"text-center\" style={{ margin: '10px' }}>\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            <Card.Title>Death</Card.Title>\r\n            <Card.Text>{latest.deaths}</Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small text=\"white\">Last updated {lastUpdated}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n        <Card bg=\"success\" text=\"white\" className=\"text-center\" style={{ margin: '10px' }}>\r\n          <Card.Img variant=\"top\" />\r\n          <Card.Body>\r\n            <Card.Title>Recovered</Card.Title>\r\n            <Card.Text>{latest.recovered}</Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small text=\"white\">Last updated {lastUpdated}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n      </CardDeck>\r\n      <Form>\r\n        <Form.Group controlId=\"formGroupSearch\">\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Search a country\"\r\n            onChange={e => setSearchCountries(e.target.value.toLowerCase())}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n      {err ? <div>{err}</div> : \"\"}\r\n      {\r\n        countries.length > 0 ?\r\n          <Columns queries={queries}>\r\n            {countries}\r\n          </Columns>\r\n          : <div className=\"text-center\">\r\n            <img src={logo} style={{ margin: \"20px\" }} alt=\"loading spinner\" />\r\n          </div>\r\n      }\r\n      <div id=\"footer\">\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import { useEffect, useRef, useState } from 'react';\r\n\r\nexport const useIO = () => {\r\n\tconst [elements, setElements] = useState([]);\r\n\tconst [entries, setEntries] = useState([]);\r\n\tconst observer = useRef(null);\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tif (elements.length) {\r\n\t\t\tobserver.current = new IntersectionObserver((ioEntries) => {\r\n\t\t\t\tsetEntries(ioEntries);\r\n\t\t\t});\r\n\r\n\t\t\telements.forEach(element => {\r\n\t\t\t\tobserver.current.observe(element);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn () => {\r\n\t\t\tif (observer.current) {\r\n\t\t\t\tobserver.current.disconnect();\r\n\t\t\t}\r\n\t\t}\r\n\t}, [elements]);\r\n\r\n\treturn [observer.current, setElements, entries];\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nmodule.hot.accept();\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}