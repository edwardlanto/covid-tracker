{"version":3,"sources":["assets/loader.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useEffect","axios","all","get","then","res","console","log","i","data","length","country","toLowerCase","setLatest","setResults","catch","err","setErr","useState","latest","results","lastUpdated","Date","parseInt","updated","toString","searchCountries","setSearchCountries","countries","filter","item","includes","map","Card","bg","text","className","key","style","margin","Body","Img","variant","src","countryInfo","flag","Title","toUpperCase","Text","cases","deaths","recovered","todayCases","todayDeaths","active","critical","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","queries","columns","query","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fb9672c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.eb2d91c5.gif\";","import React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport \"./index.css\";\nimport Columns from 'react-columns';\nimport logo from './assets/loader.gif';\nimport Form from 'react-bootstrap/Form';\n\nfunction App() {\n  useEffect(() => {\n    axios\n      .all([\n        axios.get('https://corona.lmao.ninja/v2/all'),\n        axios.get('https://corona.lmao.ninja/v2/countries')\n      ])\n      .then((res) => {\n        console.log(res[1]);\n        // Lowercasing all countries\n        for (var i = 0; i < res[1].data.length; i++) {\n          res[1].data[i].country = res[1].data[i].country.toLowerCase();\n        }\n        setLatest(res[0].data);\n        setResults(res[1].data);\n      })\n      .catch((err) => {\n        setErr(err);\n      });\n  });\n\n  const [latest, setLatest] = useState([]);\n  const [results, setResults] = useState([]);\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toString();\n  const [searchCountries, setSearchCountries] = useState(\"\");\n  const [err, setErr] = useState(\"\");\n\n  const filterCountries = results.filter(item => {\n    return item.country.includes(searchCountries)\n  });\n\n  const capitalize = str => {\n    return str.toUpperCase();\n  }\n\n  const countries = filterCountries.map((data, i) => (\n    <Card\n      bg=\"light\"\n      text=\"dark\"\n      className=\"text-center\"\n      key={i}\n      style={{ margin: \"10px\" }}\n    >\n      <Card.Body>\n        <Card.Img variant=\"top\" src={data.countryInfo.flag} className=\"flag\" />\n        <Card.Body>\n          <Card.Title>{capitalize(data.country)}</Card.Title>\n          <Card.Text>Cases {data.cases}</Card.Text>\n          <Card.Text>Deaths {data.deaths}</Card.Text>\n          <Card.Text>Recovered {data.recovered}</Card.Text>\n          <Card.Text>Today's cases{data.todayCases}</Card.Text>\n          <Card.Text>Today's deaths {data.todayDeaths}</Card.Text>\n          <Card.Text>Active {data.active}</Card.Text>\n          <Card.Text>Critical {data.critical}</Card.Text>\n        </Card.Body>\n      </Card.Body>\n    </Card>\n  ));\n\n  var queries = [{\n    columns: 2,\n    query: 'min-width:500px'\n  }, {\n    columns: 3,\n    query: 'min-width:1000px'\n  }];\n  return (\n    <div className=\"App\">\n      <CardDeck>\n        <Card bg=\"secondary\" text=\"white\" className=\"text-center\" style={{ margin: '10px' }}>\n          <Card.Img variant=\"top\" />\n          <Card.Body>\n            <Card.Title>Cases</Card.Title>\n            <Card.Text>{latest.cases}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small text=\"white\">Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card bg=\"danger\" text=\"white\" className=\"text-center\" style={{ margin: '10px' }}>\n          <Card.Img variant=\"top\" />\n          <Card.Body>\n            <Card.Title>Death</Card.Title>\n            <Card.Text>{latest.deaths}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small text=\"white\">Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        <Card bg=\"success\" text=\"white\" className=\"text-center\" style={{ margin: '10px' }}>\n          <Card.Img variant=\"top\" />\n          <Card.Body>\n            <Card.Title>Recovered</Card.Title>\n            <Card.Text>{latest.recovered}</Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small text=\"white\">Last updated {lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n      </CardDeck>\n      <Form>\n        <Form.Group controlId=\"formGroupSearch\">\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Search a country\"\n            onChange={e => setSearchCountries(e.target.value, e)}\n          />\n        </Form.Group>\n      </Form>\n      {err ? <div>{err}</div> : \"\"}\n      {\n        countries.length > 0 ?\n          <Columns queries={queries}>\n            {countries}\n          </Columns>\n          : <div className=\"text-center\">\n            <img src={logo} style={{ margin: \"20px\" }} alt=\"loading spinner\"/>\n          </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}